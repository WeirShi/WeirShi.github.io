(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{373:function(e,t,s){"use strict";s.r(t);var a=s(45),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"es6的新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6的新特性"}},[e._v("#")]),e._v(" ES6的新特性")]),e._v(" "),s("h2",{attrs:{id:"map、set、weakmap、weakset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map、set、weakmap、weakset"}},[e._v("#")]),e._v(" Map、Set、WeakMap、WeakSet")]),e._v(" "),s("h3",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" Set")]),e._v(" "),s("p",[e._v("类似于传统的数组，但是"),s("code",[e._v("Set")]),e._v("中的成员不允许重复")]),e._v(" "),s("h3",{attrs:{id:"map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[e._v("#")]),e._v(" Map")]),e._v(" "),s("p",[e._v("传统的对象的key只能是字符串，如果使用对象作为key值的话，js会优先使用toString的方法转成string来作为key值"),s("br"),e._v("\nMap的数据结构可以使用任意类型的数据作为key")]),e._v(" "),s("h3",{attrs:{id:"weakmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#weakmap"}},[e._v("#")]),e._v(" WeakMap")]),e._v(" "),s("p",[s("code",[e._v("WeakMap")]),e._v("只能使用对象作为key值，而被引用的key值是弱引用，因此该对象可能在任意时刻被回收掉。"),s("br"),e._v(" "),s("code",[e._v("WeakMap")]),e._v("无法被遍历，没有"),s("code",[e._v("Object.keys()")]),e._v("、"),s("code",[e._v("Object.values()")]),e._v("、"),s("code",[e._v("Object.entries()")]),e._v("方法，只有"),s("code",[e._v("get")]),e._v("、"),s("code",[e._v("set")]),e._v("、"),s("code",[e._v("has")]),e._v("、"),s("code",[e._v("delete")]),e._v("4个方法。")]),e._v(" "),s("h3",{attrs:{id:"weakset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#weakset"}},[e._v("#")]),e._v(" WeakSet")]),e._v(" "),s("p",[e._v("类似于"),s("code",[e._v("WeakMap")]),e._v("， 内部成员只能是对象，对其中的对象也是弱引用，当没有其他对"),s("code",[e._v("WeakSet")]),e._v("中的对象的引用的话，这些对象会被回收掉，"),s("code",[e._v("WeakSet")]),e._v("同样无法被遍历")]),e._v(" "),s("h2",{attrs:{id:"symbol"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[e._v("#")]),e._v(" Symbol")]),e._v(" "),s("p",[e._v("ES6中新增了一种数据类型，"),s("code",[e._v("Symbol")]),e._v("，不是构造函数，在使用时不需要"),s("code",[e._v("new")]),e._v("，用来表示一个独一无二的数据，对象的key可以是"),s("code",[e._v("Symbol")]),e._v("。"),s("br"),e._v(" "),s("code",[e._v("Symbol")]),e._v("也可以用来标识对象中的私有成员，因为"),s("code",[e._v("Symbol")]),e._v("的唯一性，外部访问时无法创建同一个"),s("code",[e._v("Symbol")]),e._v("数据，因此可以用来表示对象中的私有成员。正因如此，如果对象的key是一个"),s("code",[e._v("Symbol")]),e._v("类型的话，是无法遍历得到这个key值的，既无法使用"),s("code",[e._v("Object.keys")]),e._v("或者"),s("code",[e._v("for of")]),e._v("遍历，只能使用"),s("code",[e._v("Object.getOwnPropertySymbols")]),e._v("方法来获取"),s("code",[e._v("Symbol")]),e._v("类型的key值。")]),e._v(" "),s("p",[e._v("如果需要使用同一个"),s("code",[e._v("Symbol")]),e._v("类型的数据，我们可以使用"),s("code",[e._v("Symbol.for")]),e._v("方法，传入同一个字符串时，返回的"),s("code",[e._v("Symbol")]),e._v("类型的数据也会是一样的，")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'symbol'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" s2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'symbol'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// true")]),e._v("\n")])])]),s("p",[e._v("需要注意的是该方法如果传入的值不是字符串的话，Symbol内部会先将其传值字符串，因此传入一个"),s("code",[e._v("true")]),e._v("和字符串"),s("code",[e._v("'true'")]),e._v("，返回的Symbol数据也会是同一个")]),e._v(" "),s("h2",{attrs:{id:"reflect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect"}},[e._v("#")]),e._v(" Reflect")]),e._v(" "),s("p",[s("code",[e._v("Reflect")]),e._v("是ES6中引入的对象操作方法，一个静态类，不能使用"),s("code",[e._v("new Reflect()")]),e._v("来进行调用，类似于"),s("code",[e._v("Math")]),e._v("，内置的静态方法与"),s("code",[e._v("proxy")]),e._v("的方法相同。"),s("br"),e._v(" "),s("strong",[e._v("个人感觉 "),s("code",[e._v("Reflect")]),e._v("的引入是对ES5中操作对象方法的规范处理")])]),e._v(" "),s("p",[e._v("比如，在ES5中需要获取对象中的某一个属性，或者删除对象中某一个属性，我们都会使用到"),s("code",[e._v("'name' in obj")]),e._v(", "),s("code",[e._v("delete obj['name']")]),e._v("，既使用到"),s("code",[e._v("delete")]),e._v("操作符又用到了"),s("code",[e._v("in")]),e._v("运算符，看起来很不规范，但是在"),s("code",[e._v("Reflect")]),e._v("中我们就可以统一使用"),s("code",[e._v("Reflect")]),e._v("的内置方法，"),s("code",[e._v("Reflect.has(obj, 'name')")]),e._v("和"),s("code",[e._v("Reflect.deleteProperty(obj, 'name')")]),e._v("，这样看起来就比较统一规范。如下：")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  name"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Tom'")]),e._v("\n  age"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ES5方法")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'name'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" obj\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("delete")]),e._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("name\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("keys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Reflect")]),e._v("\nReflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("has")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nReflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("deleteProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nReflect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ownKeys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("h3",{attrs:{id:"reflect的静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reflect的静态方法"}},[e._v("#")]),e._v(" Reflect的静态方法")]),e._v(" "),s("ol",[s("li",[s("code",[e._v("Reflect.get()")]),e._v(" 获取对象中的某一个属性，类似于执行"),s("code",[e._v("obj['name']")])]),e._v(" "),s("li",[s("code",[e._v("Reflect.set")]),e._v(" 给对象设置属性和值")]),e._v(" "),s("li",[s("code",[e._v("Reflect.has()")]),e._v(" 判断对象中是否存在某一个属性，类似于"),s("code",[e._v("in")]),e._v("运算符")]),e._v(" "),s("li",[s("code",[e._v("Reflect.ownKeys()")]),e._v(" 获取对象中所有的属性值，返回一个数组，类似于"),s("code",[e._v("Object.keys()")])]),e._v(" "),s("li",[s("code",[e._v("Reflect.deleteProperty()")]),e._v(" 删除对象中的某一个属性，类似于"),s("code",[e._v("delete")]),e._v("操作符")]),e._v(" "),s("li",[s("code",[e._v("Reflect.apply()")]),e._v(" 对一个函数的调用，类似于"),s("code",[e._v("Function.prototype.apply()")])]),e._v(" "),s("li",[s("code",[e._v("Reflect.construct()")]),e._v(" 创建一个构造函数，类似于"),s("code",[e._v("new")]),e._v("操作符")]),e._v(" "),s("li",[s("code",[e._v("Reflect.defineProperty()")]),e._v(" 设置一个响应式对象，类似于"),s("code",[e._v("Object.defineProperty()")])]),e._v(" "),s("li",[s("code",[e._v("Reflect.getOwnPropertyDescriptor()")]),e._v(" 获取对象中的某一个属性的描述，类似于"),s("code",[e._v("Object.getOwnPropertyDescriptor()")])]),e._v(" "),s("li",[s("code",[e._v("Reflect.getPropertyOf()")]),e._v(" 获取指定对象的原型，类似于"),s("code",[e._v("Object.getPropertyOf()")])]),e._v(" "),s("li",[s("code",[e._v("Reflect.setPropertyOf()")]),e._v(" 给对象设置原型")]),e._v(" "),s("li",[s("code",[e._v("Reflect.preventExtensions()")]),e._v(" 设置一个对象无法添加新的属性，类似与"),s("code",[e._v("Object.preventExtensions()")])]),e._v(" "),s("li",[s("code",[e._v("Reflect.isExtensible()")]),e._v(" 判断对象是否可以添加新的属性，类似与"),s("code",[e._v("Object.isExtensible()")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);